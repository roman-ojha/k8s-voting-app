*) Project on:
    -> Client: React
    -> Backend: Golang
    -> Database: MongoDB
    -> Deployed on: Kubernetes Cluster
    
*) Architecture:
    -> whole application will be deployed on EKS
    -> Have three services:
        1. Frontend
            -> It will going to be deployed using deployment and created using React and it will be expose using the Service called ELB(Elastic Load balancer) type
        2. API
            -> It will going to be deployed using Deployment and created using Golang and exposed using the service of Load balancer type ELB(Elastic Load balancer)
        3. MongoDB
            -> Mongodb have 3 pods, and they are going to be deployed using statefulSets
            -> './02_Mongodb_Replicas.png', './03_Mongodb_Replicas.png'
            -> We have 3 pods to enable Replica sets of MOngoDB, Where Pod0 will be primary which will Read and write Data and Pod1 & Pod2 will going to be secondary and have replicas of data and only works when the first pod will get deleted or destroyed './04_Make_Primary_DB.png'
            -> Along with the pods we have PV(Persistent volumes) & PVC(Persistent volume claims) to store the data from the database into EBS volume in AWS
            

*) Setup:
    -> https://github.com/N4si/K8s-voting-app
    *> Setup EKS cluster:
        -> https://youtu.be/pTmIoKUeU-A?list=PL5sSYBuH9_fhG9oSfSGHAoL3qp2LgoueT&t=342
    *> Setup up EC2 Instance for development:
        -> https://youtu.be/pTmIoKUeU-A?list=PL5sSYBuH9_fhG9oSfSGHAoL3qp2LgoueT&t=493
        -> Install Kubectl on AWS EC2:
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.3/2023-11-14/bin/darwin/amd64/kubectl
            chmod +x ./kubectl
            sudo cp ./kubectl /usr/local/bin
            export path=/usr/local/bin:$PATH
            
    *> Manifest explanation:
        -> Github Ref: https://github.com/N4si/K8s-voting-app
        -> https://youtu.be/pTmIoKUeU-A?list=PL5sSYBuH9_fhG9oSfSGHAoL3qp2LgoueT&t=1289
        *) Apply:
            -> './manifests/namespace.yml'
            -> './manifests/mongo-storageclass.yaml'
            -> './manifests/mongo-statefulset.yaml'
            -> './manifests/mongo-service.yaml'
                -> To expose the mongodb Service we will going to use Headless service where use have set 'ClusterIP' and it is set to None
                -> It meas that we are not exposing it to the outside world we are just exposing it to the API service
                -> run mongo shell inside pods:
                    -> kubectl exec -it <pod_name> -- mongo
                    
                *) Setting up mongo-0 as primary and other 2 as secondary like:
                    kubectl exec -it mongo-0 -- mongo
                    rs.initiate();
                    sleep(2000);
                    rs.add("mongo-1.mongo:27017");
                    sleep(2000);
                    rs.add("mongo-2.mongo:27017");
                    sleep(2000);
                    cfg = rs.conf();
                    cfg.members[0].host = "mongo-0.mongo:27017";
                    rs.reconfig(cfg, {force: true});
                    sleep(5000);
            -> './manifests/mongo-secret.yaml'
            -> './manifests/api-deployment.yaml'
                -> kubectl expose deploy api \
                 --name=api \
                 --type=LoadBalancer \
                 --port=80 \
                 --target-port=8080
                    -> When we run this it should go and create load balancer service for us
            -> './manifests/api-service.yaml'
            -> './manifests/frontend-deployment.yaml'
            -> './manifests/frontend-service.yaml'

            
        -> See all the commands on './README.md' as well